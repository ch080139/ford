# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from glosa/qt_GUI.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class qt_GUI(genpy.Message):
  _md5sum = "27279271049a075f93453cd8cea1d9e3"
  _type = "glosa/qt_GUI"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 iskeepCurSpeed = 1
uint8 notkeepCurSpeed = 0

float64 EgoSpeed
float64 PreSpeed
float64 LimitSpeed
float64 Dis2Stopline

uint32 intersectionID

float64 Latitude
float64 Longitude
float64 Height


float64 upperSpeed
float64 bottomSpeed
uint8 keepCurSpeed

uint8 Str_is_val
float64 StrColor
float64 StrlikelyEndTime

uint8 Left_is_val
float64 LeftColor
float64 LeftlikelyEndTime

uint8 Right_is_val
uint8 RightColor
float64 RightlikelyEndTime
"""
  # Pseudo-constants
  iskeepCurSpeed = 1
  notkeepCurSpeed = 0

  __slots__ = ['EgoSpeed','PreSpeed','LimitSpeed','Dis2Stopline','intersectionID','Latitude','Longitude','Height','upperSpeed','bottomSpeed','keepCurSpeed','Str_is_val','StrColor','StrlikelyEndTime','Left_is_val','LeftColor','LeftlikelyEndTime','Right_is_val','RightColor','RightlikelyEndTime']
  _slot_types = ['float64','float64','float64','float64','uint32','float64','float64','float64','float64','float64','uint8','uint8','float64','float64','uint8','float64','float64','uint8','uint8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       EgoSpeed,PreSpeed,LimitSpeed,Dis2Stopline,intersectionID,Latitude,Longitude,Height,upperSpeed,bottomSpeed,keepCurSpeed,Str_is_val,StrColor,StrlikelyEndTime,Left_is_val,LeftColor,LeftlikelyEndTime,Right_is_val,RightColor,RightlikelyEndTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(qt_GUI, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.EgoSpeed is None:
        self.EgoSpeed = 0.
      if self.PreSpeed is None:
        self.PreSpeed = 0.
      if self.LimitSpeed is None:
        self.LimitSpeed = 0.
      if self.Dis2Stopline is None:
        self.Dis2Stopline = 0.
      if self.intersectionID is None:
        self.intersectionID = 0
      if self.Latitude is None:
        self.Latitude = 0.
      if self.Longitude is None:
        self.Longitude = 0.
      if self.Height is None:
        self.Height = 0.
      if self.upperSpeed is None:
        self.upperSpeed = 0.
      if self.bottomSpeed is None:
        self.bottomSpeed = 0.
      if self.keepCurSpeed is None:
        self.keepCurSpeed = 0
      if self.Str_is_val is None:
        self.Str_is_val = 0
      if self.StrColor is None:
        self.StrColor = 0.
      if self.StrlikelyEndTime is None:
        self.StrlikelyEndTime = 0.
      if self.Left_is_val is None:
        self.Left_is_val = 0
      if self.LeftColor is None:
        self.LeftColor = 0.
      if self.LeftlikelyEndTime is None:
        self.LeftlikelyEndTime = 0.
      if self.Right_is_val is None:
        self.Right_is_val = 0
      if self.RightColor is None:
        self.RightColor = 0
      if self.RightlikelyEndTime is None:
        self.RightlikelyEndTime = 0.
    else:
      self.EgoSpeed = 0.
      self.PreSpeed = 0.
      self.LimitSpeed = 0.
      self.Dis2Stopline = 0.
      self.intersectionID = 0
      self.Latitude = 0.
      self.Longitude = 0.
      self.Height = 0.
      self.upperSpeed = 0.
      self.bottomSpeed = 0.
      self.keepCurSpeed = 0
      self.Str_is_val = 0
      self.StrColor = 0.
      self.StrlikelyEndTime = 0.
      self.Left_is_val = 0
      self.LeftColor = 0.
      self.LeftlikelyEndTime = 0.
      self.Right_is_val = 0
      self.RightColor = 0
      self.RightlikelyEndTime = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4dI5d2B2dB2d2Bd().pack(_x.EgoSpeed, _x.PreSpeed, _x.LimitSpeed, _x.Dis2Stopline, _x.intersectionID, _x.Latitude, _x.Longitude, _x.Height, _x.upperSpeed, _x.bottomSpeed, _x.keepCurSpeed, _x.Str_is_val, _x.StrColor, _x.StrlikelyEndTime, _x.Left_is_val, _x.LeftColor, _x.LeftlikelyEndTime, _x.Right_is_val, _x.RightColor, _x.RightlikelyEndTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 121
      (_x.EgoSpeed, _x.PreSpeed, _x.LimitSpeed, _x.Dis2Stopline, _x.intersectionID, _x.Latitude, _x.Longitude, _x.Height, _x.upperSpeed, _x.bottomSpeed, _x.keepCurSpeed, _x.Str_is_val, _x.StrColor, _x.StrlikelyEndTime, _x.Left_is_val, _x.LeftColor, _x.LeftlikelyEndTime, _x.Right_is_val, _x.RightColor, _x.RightlikelyEndTime,) = _get_struct_4dI5d2B2dB2d2Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4dI5d2B2dB2d2Bd().pack(_x.EgoSpeed, _x.PreSpeed, _x.LimitSpeed, _x.Dis2Stopline, _x.intersectionID, _x.Latitude, _x.Longitude, _x.Height, _x.upperSpeed, _x.bottomSpeed, _x.keepCurSpeed, _x.Str_is_val, _x.StrColor, _x.StrlikelyEndTime, _x.Left_is_val, _x.LeftColor, _x.LeftlikelyEndTime, _x.Right_is_val, _x.RightColor, _x.RightlikelyEndTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 121
      (_x.EgoSpeed, _x.PreSpeed, _x.LimitSpeed, _x.Dis2Stopline, _x.intersectionID, _x.Latitude, _x.Longitude, _x.Height, _x.upperSpeed, _x.bottomSpeed, _x.keepCurSpeed, _x.Str_is_val, _x.StrColor, _x.StrlikelyEndTime, _x.Left_is_val, _x.LeftColor, _x.LeftlikelyEndTime, _x.Right_is_val, _x.RightColor, _x.RightlikelyEndTime,) = _get_struct_4dI5d2B2dB2d2Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dI5d2B2dB2d2Bd = None
def _get_struct_4dI5d2B2dB2d2Bd():
    global _struct_4dI5d2B2dB2d2Bd
    if _struct_4dI5d2B2dB2d2Bd is None:
        _struct_4dI5d2B2dB2d2Bd = struct.Struct("<4dI5d2B2dB2d2Bd")
    return _struct_4dI5d2B2dB2d2Bd
