# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msgs/Satellite.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Satellite(genpy.Message):
  _md5sum = "e43ed4aebf909b95af15ba72c23c4a2a"
  _type = "gps_msgs/Satellite"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint8 num
uint8 system
uint8 flags1
uint8 flags2
uint8 elevation
uint16 azimuth
uint8[3] frequency
"""
  __slots__ = ['num','system','flags1','flags2','elevation','azimuth','frequency']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint16','uint8[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num,system,flags1,flags2,elevation,azimuth,frequency

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Satellite, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num is None:
        self.num = 0
      if self.system is None:
        self.system = 0
      if self.flags1 is None:
        self.flags1 = 0
      if self.flags2 is None:
        self.flags2 = 0
      if self.elevation is None:
        self.elevation = 0
      if self.azimuth is None:
        self.azimuth = 0
      if self.frequency is None:
        self.frequency = b'\0'*3
    else:
      self.num = 0
      self.system = 0
      self.flags1 = 0
      self.flags2 = 0
      self.elevation = 0
      self.azimuth = 0
      self.frequency = b'\0'*3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5BH().pack(_x.num, _x.system, _x.flags1, _x.flags2, _x.elevation, _x.azimuth))
      _x = self.frequency
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.num, _x.system, _x.flags1, _x.flags2, _x.elevation, _x.azimuth,) = _get_struct_5BH().unpack(str[start:end])
      start = end
      end += 3
      self.frequency = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5BH().pack(_x.num, _x.system, _x.flags1, _x.flags2, _x.elevation, _x.azimuth))
      _x = self.frequency
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.num, _x.system, _x.flags1, _x.flags2, _x.elevation, _x.azimuth,) = _get_struct_5BH().unpack(str[start:end])
      start = end
      end += 3
      self.frequency = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3s = None
def _get_struct_3s():
    global _struct_3s
    if _struct_3s is None:
        _struct_3s = struct.Struct("<3s")
    return _struct_3s
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_5BH = None
def _get_struct_5BH():
    global _struct_5BH
    if _struct_5BH is None:
        _struct_5BH = struct.Struct("<5BH")
    return _struct_5BH
