// Generated by gencpp from file msgs_record/glosa.msg
// DO NOT EDIT!


#ifndef MSGS_RECORD_MESSAGE_GLOSA_H
#define MSGS_RECORD_MESSAGE_GLOSA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace msgs_record
{
template <class ContainerAllocator>
struct glosa_
{
  typedef glosa_<ContainerAllocator> Type;

  glosa_()
    : header()
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , Utmx(0.0)
    , Utmy(0.0)
    , Yaw(0.0)
    , EgoSpeed(0.0)
    , stationId(0)
    , SpeedLimit(0.0)
    , dis2inter(0.0)
    , Str_is_val(0)
    , StrSignalState(0)
    , StrlikelyEndTime(0.0)
    , Left_is_val(0)
    , LeftSignalState(0)
    , LeftlikelyEndTime(0.0)
    , Right_is_val(0)
    , RighSignalState(0)
    , RightlikelyEndTime(0.0)
    , azimuth(0.0)
    , distance(0.0)
    , speed(0.0)
    , status(0)
    , id(0)  {
    }
  glosa_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , Utmx(0.0)
    , Utmy(0.0)
    , Yaw(0.0)
    , EgoSpeed(0.0)
    , stationId(0)
    , SpeedLimit(0.0)
    , dis2inter(0.0)
    , Str_is_val(0)
    , StrSignalState(0)
    , StrlikelyEndTime(0.0)
    , Left_is_val(0)
    , LeftSignalState(0)
    , LeftlikelyEndTime(0.0)
    , Right_is_val(0)
    , RighSignalState(0)
    , RightlikelyEndTime(0.0)
    , azimuth(0.0)
    , distance(0.0)
    , speed(0.0)
    , status(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef double _Utmx_type;
  _Utmx_type Utmx;

   typedef double _Utmy_type;
  _Utmy_type Utmy;

   typedef double _Yaw_type;
  _Yaw_type Yaw;

   typedef double _EgoSpeed_type;
  _EgoSpeed_type EgoSpeed;

   typedef uint16_t _stationId_type;
  _stationId_type stationId;

   typedef double _SpeedLimit_type;
  _SpeedLimit_type SpeedLimit;

   typedef double _dis2inter_type;
  _dis2inter_type dis2inter;

   typedef uint8_t _Str_is_val_type;
  _Str_is_val_type Str_is_val;

   typedef uint8_t _StrSignalState_type;
  _StrSignalState_type StrSignalState;

   typedef double _StrlikelyEndTime_type;
  _StrlikelyEndTime_type StrlikelyEndTime;

   typedef uint8_t _Left_is_val_type;
  _Left_is_val_type Left_is_val;

   typedef uint8_t _LeftSignalState_type;
  _LeftSignalState_type LeftSignalState;

   typedef double _LeftlikelyEndTime_type;
  _LeftlikelyEndTime_type LeftlikelyEndTime;

   typedef uint8_t _Right_is_val_type;
  _Right_is_val_type Right_is_val;

   typedef uint8_t _RighSignalState_type;
  _RighSignalState_type RighSignalState;

   typedef double _RightlikelyEndTime_type;
  _RightlikelyEndTime_type RightlikelyEndTime;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _speed_type;
  _speed_type speed;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _id_type;
  _id_type id;



  enum {
    RED = 3u,
    GREEN = 5u,
    YELLOW = 7u,
    NEW_TARGET = 1u,
    UPDATE_TARGET = 3u,
    COASTED_TARGET = 4u,
  };


  typedef boost::shared_ptr< ::msgs_record::glosa_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_record::glosa_<ContainerAllocator> const> ConstPtr;

}; // struct glosa_

typedef ::msgs_record::glosa_<std::allocator<void> > glosa;

typedef boost::shared_ptr< ::msgs_record::glosa > glosaPtr;
typedef boost::shared_ptr< ::msgs_record::glosa const> glosaConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_record::glosa_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_record::glosa_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msgs_record

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'msgs_record': ['/home/chenhao/catkin_ws/src/msgs_record/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msgs_record::glosa_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_record::glosa_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_record::glosa_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_record::glosa_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_record::glosa_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_record::glosa_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_record::glosa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8951b090850cccee9e623b752294b0d";
  }

  static const char* value(const ::msgs_record::glosa_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8951b090850ccceULL;
  static const uint64_t static_value2 = 0xe9e623b752294b0dULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_record::glosa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_record/glosa";
  }

  static const char* value(const ::msgs_record::glosa_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_record::glosa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RED = 3\n\
uint8 GREEN = 5\n\
uint8 YELLOW = 7\n\
uint8 NEW_TARGET = 1\n\
uint8 UPDATE_TARGET = 3\n\
uint8 COASTED_TARGET = 4\n\
\n\
std_msgs/Header header\n\
\n\
float64 latitude\n\
float64 longitude\n\
float64 height\n\
float64 Utmx\n\
float64 Utmy\n\
float64 Yaw\n\
float64 EgoSpeed\n\
\n\
uint16 stationId\n\
float64 SpeedLimit\n\
float64 dis2inter\n\
\n\
uint8 Str_is_val\n\
uint8 StrSignalState\n\
float64 StrlikelyEndTime\n\
\n\
uint8 Left_is_val\n\
uint8 LeftSignalState\n\
float64 LeftlikelyEndTime\n\
\n\
uint8 Right_is_val\n\
uint8 RighSignalState\n\
float64 RightlikelyEndTime\n\
\n\
float64 azimuth\n\
float64 distance\n\
float64 speed\n\
uint8 status\n\
uint8 id\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::msgs_record::glosa_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_record::glosa_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.Utmx);
      stream.next(m.Utmy);
      stream.next(m.Yaw);
      stream.next(m.EgoSpeed);
      stream.next(m.stationId);
      stream.next(m.SpeedLimit);
      stream.next(m.dis2inter);
      stream.next(m.Str_is_val);
      stream.next(m.StrSignalState);
      stream.next(m.StrlikelyEndTime);
      stream.next(m.Left_is_val);
      stream.next(m.LeftSignalState);
      stream.next(m.LeftlikelyEndTime);
      stream.next(m.Right_is_val);
      stream.next(m.RighSignalState);
      stream.next(m.RightlikelyEndTime);
      stream.next(m.azimuth);
      stream.next(m.distance);
      stream.next(m.speed);
      stream.next(m.status);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct glosa_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_record::glosa_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_record::glosa_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "Utmx: ";
    Printer<double>::stream(s, indent + "  ", v.Utmx);
    s << indent << "Utmy: ";
    Printer<double>::stream(s, indent + "  ", v.Utmy);
    s << indent << "Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw);
    s << indent << "EgoSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.EgoSpeed);
    s << indent << "stationId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.stationId);
    s << indent << "SpeedLimit: ";
    Printer<double>::stream(s, indent + "  ", v.SpeedLimit);
    s << indent << "dis2inter: ";
    Printer<double>::stream(s, indent + "  ", v.dis2inter);
    s << indent << "Str_is_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Str_is_val);
    s << indent << "StrSignalState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.StrSignalState);
    s << indent << "StrlikelyEndTime: ";
    Printer<double>::stream(s, indent + "  ", v.StrlikelyEndTime);
    s << indent << "Left_is_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Left_is_val);
    s << indent << "LeftSignalState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LeftSignalState);
    s << indent << "LeftlikelyEndTime: ";
    Printer<double>::stream(s, indent + "  ", v.LeftlikelyEndTime);
    s << indent << "Right_is_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Right_is_val);
    s << indent << "RighSignalState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RighSignalState);
    s << indent << "RightlikelyEndTime: ";
    Printer<double>::stream(s, indent + "  ", v.RightlikelyEndTime);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_RECORD_MESSAGE_GLOSA_H
