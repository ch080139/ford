// Generated by gencpp from file glosa/qt_GUI.msg
// DO NOT EDIT!


#ifndef GLOSA_MESSAGE_QT_GUI_H
#define GLOSA_MESSAGE_QT_GUI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace glosa
{
template <class ContainerAllocator>
struct qt_GUI_
{
  typedef qt_GUI_<ContainerAllocator> Type;

  qt_GUI_()
    : EgoSpeed(0.0)
    , PreSpeed(0.0)
    , LimitSpeed(0.0)
    , Dis2Stopline(0.0)
    , intersectionID(0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Height(0.0)
    , upperSpeed(0.0)
    , bottomSpeed(0.0)
    , keepCurSpeed(0)
    , Str_is_val(0)
    , StrColor(0.0)
    , StrlikelyEndTime(0.0)
    , Left_is_val(0)
    , LeftColor(0.0)
    , LeftlikelyEndTime(0.0)
    , Right_is_val(0)
    , RightColor(0)
    , RightlikelyEndTime(0.0)  {
    }
  qt_GUI_(const ContainerAllocator& _alloc)
    : EgoSpeed(0.0)
    , PreSpeed(0.0)
    , LimitSpeed(0.0)
    , Dis2Stopline(0.0)
    , intersectionID(0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Height(0.0)
    , upperSpeed(0.0)
    , bottomSpeed(0.0)
    , keepCurSpeed(0)
    , Str_is_val(0)
    , StrColor(0.0)
    , StrlikelyEndTime(0.0)
    , Left_is_val(0)
    , LeftColor(0.0)
    , LeftlikelyEndTime(0.0)
    , Right_is_val(0)
    , RightColor(0)
    , RightlikelyEndTime(0.0)  {
  (void)_alloc;
    }



   typedef double _EgoSpeed_type;
  _EgoSpeed_type EgoSpeed;

   typedef double _PreSpeed_type;
  _PreSpeed_type PreSpeed;

   typedef double _LimitSpeed_type;
  _LimitSpeed_type LimitSpeed;

   typedef double _Dis2Stopline_type;
  _Dis2Stopline_type Dis2Stopline;

   typedef uint32_t _intersectionID_type;
  _intersectionID_type intersectionID;

   typedef double _Latitude_type;
  _Latitude_type Latitude;

   typedef double _Longitude_type;
  _Longitude_type Longitude;

   typedef double _Height_type;
  _Height_type Height;

   typedef double _upperSpeed_type;
  _upperSpeed_type upperSpeed;

   typedef double _bottomSpeed_type;
  _bottomSpeed_type bottomSpeed;

   typedef uint8_t _keepCurSpeed_type;
  _keepCurSpeed_type keepCurSpeed;

   typedef uint8_t _Str_is_val_type;
  _Str_is_val_type Str_is_val;

   typedef double _StrColor_type;
  _StrColor_type StrColor;

   typedef double _StrlikelyEndTime_type;
  _StrlikelyEndTime_type StrlikelyEndTime;

   typedef uint8_t _Left_is_val_type;
  _Left_is_val_type Left_is_val;

   typedef double _LeftColor_type;
  _LeftColor_type LeftColor;

   typedef double _LeftlikelyEndTime_type;
  _LeftlikelyEndTime_type LeftlikelyEndTime;

   typedef uint8_t _Right_is_val_type;
  _Right_is_val_type Right_is_val;

   typedef uint8_t _RightColor_type;
  _RightColor_type RightColor;

   typedef double _RightlikelyEndTime_type;
  _RightlikelyEndTime_type RightlikelyEndTime;



  enum {
    iskeepCurSpeed = 1u,
    notkeepCurSpeed = 0u,
  };


  typedef boost::shared_ptr< ::glosa::qt_GUI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::glosa::qt_GUI_<ContainerAllocator> const> ConstPtr;

}; // struct qt_GUI_

typedef ::glosa::qt_GUI_<std::allocator<void> > qt_GUI;

typedef boost::shared_ptr< ::glosa::qt_GUI > qt_GUIPtr;
typedef boost::shared_ptr< ::glosa::qt_GUI const> qt_GUIConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::glosa::qt_GUI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::glosa::qt_GUI_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace glosa

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'glosa': ['/home/chenhao/catkin_ws/src/glosa/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::glosa::qt_GUI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::glosa::qt_GUI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::glosa::qt_GUI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::glosa::qt_GUI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::glosa::qt_GUI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::glosa::qt_GUI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::glosa::qt_GUI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27279271049a075f93453cd8cea1d9e3";
  }

  static const char* value(const ::glosa::qt_GUI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27279271049a075fULL;
  static const uint64_t static_value2 = 0x93453cd8cea1d9e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::glosa::qt_GUI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "glosa/qt_GUI";
  }

  static const char* value(const ::glosa::qt_GUI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::glosa::qt_GUI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 iskeepCurSpeed = 1\n\
uint8 notkeepCurSpeed = 0\n\
\n\
float64 EgoSpeed\n\
float64 PreSpeed\n\
float64 LimitSpeed\n\
float64 Dis2Stopline\n\
\n\
uint32 intersectionID\n\
\n\
float64 Latitude\n\
float64 Longitude\n\
float64 Height\n\
\n\
\n\
float64 upperSpeed\n\
float64 bottomSpeed\n\
uint8 keepCurSpeed\n\
\n\
uint8 Str_is_val\n\
float64 StrColor\n\
float64 StrlikelyEndTime\n\
\n\
uint8 Left_is_val\n\
float64 LeftColor\n\
float64 LeftlikelyEndTime\n\
\n\
uint8 Right_is_val\n\
uint8 RightColor\n\
float64 RightlikelyEndTime\n\
";
  }

  static const char* value(const ::glosa::qt_GUI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::glosa::qt_GUI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.EgoSpeed);
      stream.next(m.PreSpeed);
      stream.next(m.LimitSpeed);
      stream.next(m.Dis2Stopline);
      stream.next(m.intersectionID);
      stream.next(m.Latitude);
      stream.next(m.Longitude);
      stream.next(m.Height);
      stream.next(m.upperSpeed);
      stream.next(m.bottomSpeed);
      stream.next(m.keepCurSpeed);
      stream.next(m.Str_is_val);
      stream.next(m.StrColor);
      stream.next(m.StrlikelyEndTime);
      stream.next(m.Left_is_val);
      stream.next(m.LeftColor);
      stream.next(m.LeftlikelyEndTime);
      stream.next(m.Right_is_val);
      stream.next(m.RightColor);
      stream.next(m.RightlikelyEndTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct qt_GUI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::glosa::qt_GUI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::glosa::qt_GUI_<ContainerAllocator>& v)
  {
    s << indent << "EgoSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.EgoSpeed);
    s << indent << "PreSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.PreSpeed);
    s << indent << "LimitSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.LimitSpeed);
    s << indent << "Dis2Stopline: ";
    Printer<double>::stream(s, indent + "  ", v.Dis2Stopline);
    s << indent << "intersectionID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.intersectionID);
    s << indent << "Latitude: ";
    Printer<double>::stream(s, indent + "  ", v.Latitude);
    s << indent << "Longitude: ";
    Printer<double>::stream(s, indent + "  ", v.Longitude);
    s << indent << "Height: ";
    Printer<double>::stream(s, indent + "  ", v.Height);
    s << indent << "upperSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.upperSpeed);
    s << indent << "bottomSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.bottomSpeed);
    s << indent << "keepCurSpeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.keepCurSpeed);
    s << indent << "Str_is_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Str_is_val);
    s << indent << "StrColor: ";
    Printer<double>::stream(s, indent + "  ", v.StrColor);
    s << indent << "StrlikelyEndTime: ";
    Printer<double>::stream(s, indent + "  ", v.StrlikelyEndTime);
    s << indent << "Left_is_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Left_is_val);
    s << indent << "LeftColor: ";
    Printer<double>::stream(s, indent + "  ", v.LeftColor);
    s << indent << "LeftlikelyEndTime: ";
    Printer<double>::stream(s, indent + "  ", v.LeftlikelyEndTime);
    s << indent << "Right_is_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Right_is_val);
    s << indent << "RightColor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RightColor);
    s << indent << "RightlikelyEndTime: ";
    Printer<double>::stream(s, indent + "  ", v.RightlikelyEndTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLOSA_MESSAGE_QT_GUI_H
