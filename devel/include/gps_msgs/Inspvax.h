// Generated by gencpp from file gps_msgs/Inspvax.msg
// DO NOT EDIT!


#ifndef GPS_MSGS_MESSAGE_INSPVAX_H
#define GPS_MSGS_MESSAGE_INSPVAX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gps_msgs
{
template <class ContainerAllocator>
struct Inspvax_
{
  typedef Inspvax_<ContainerAllocator> Type;

  Inspvax_()
    : header()
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , latitude_standard_deviation(0.0)
    , longitude_standard_deviation(0.0)
    , height_standard_deviation(0.0)
    , northing_standard_deviation(0.0)
    , easting_standard_deviation(0.0)
    , uping_standard_deviation(0.0)
    , roll_standard_deviation(0.0)
    , pitch_standard_deviation(0.0)
    , azimuth_standard_deviation(0.0)  {
    }
  Inspvax_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , latitude_standard_deviation(0.0)
    , longitude_standard_deviation(0.0)
    , height_standard_deviation(0.0)
    , northing_standard_deviation(0.0)
    , easting_standard_deviation(0.0)
    , uping_standard_deviation(0.0)
    , roll_standard_deviation(0.0)
    , pitch_standard_deviation(0.0)
    , azimuth_standard_deviation(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef float _undulation_type;
  _undulation_type undulation;

   typedef double _north_velocity_type;
  _north_velocity_type north_velocity;

   typedef double _east_velocity_type;
  _east_velocity_type east_velocity;

   typedef double _up_velocity_type;
  _up_velocity_type up_velocity;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef float _latitude_standard_deviation_type;
  _latitude_standard_deviation_type latitude_standard_deviation;

   typedef float _longitude_standard_deviation_type;
  _longitude_standard_deviation_type longitude_standard_deviation;

   typedef float _height_standard_deviation_type;
  _height_standard_deviation_type height_standard_deviation;

   typedef float _northing_standard_deviation_type;
  _northing_standard_deviation_type northing_standard_deviation;

   typedef float _easting_standard_deviation_type;
  _easting_standard_deviation_type easting_standard_deviation;

   typedef float _uping_standard_deviation_type;
  _uping_standard_deviation_type uping_standard_deviation;

   typedef float _roll_standard_deviation_type;
  _roll_standard_deviation_type roll_standard_deviation;

   typedef float _pitch_standard_deviation_type;
  _pitch_standard_deviation_type pitch_standard_deviation;

   typedef float _azimuth_standard_deviation_type;
  _azimuth_standard_deviation_type azimuth_standard_deviation;





  typedef boost::shared_ptr< ::gps_msgs::Inspvax_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_msgs::Inspvax_<ContainerAllocator> const> ConstPtr;

}; // struct Inspvax_

typedef ::gps_msgs::Inspvax_<std::allocator<void> > Inspvax;

typedef boost::shared_ptr< ::gps_msgs::Inspvax > InspvaxPtr;
typedef boost::shared_ptr< ::gps_msgs::Inspvax const> InspvaxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_msgs::Inspvax_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_msgs::Inspvax_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gps_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'gps_msgs': ['/home/chenhao/catkin_ws/src/gps_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::Inspvax_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::Inspvax_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::Inspvax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::Inspvax_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::Inspvax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::Inspvax_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_msgs::Inspvax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "442bc1ce33238294992441ea03898496";
  }

  static const char* value(const ::gps_msgs::Inspvax_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x442bc1ce33238294ULL;
  static const uint64_t static_value2 = 0x992441ea03898496ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_msgs::Inspvax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_msgs/Inspvax";
  }

  static const char* value(const ::gps_msgs::Inspvax_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_msgs::Inspvax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
float64 latitude\n\
float64 longitude\n\
float64 height\n\
float32 undulation\n\
float64 north_velocity\n\
float64 east_velocity\n\
float64 up_velocity\n\
float64 roll\n\
float64 pitch\n\
float64 azimuth\n\
float32 latitude_standard_deviation\n\
float32 longitude_standard_deviation\n\
float32 height_standard_deviation\n\
float32 northing_standard_deviation\n\
float32 easting_standard_deviation\n\
float32 uping_standard_deviation\n\
float32 roll_standard_deviation\n\
float32 pitch_standard_deviation\n\
float32 azimuth_standard_deviation\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::gps_msgs::Inspvax_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_msgs::Inspvax_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.undulation);
      stream.next(m.north_velocity);
      stream.next(m.east_velocity);
      stream.next(m.up_velocity);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.azimuth);
      stream.next(m.latitude_standard_deviation);
      stream.next(m.longitude_standard_deviation);
      stream.next(m.height_standard_deviation);
      stream.next(m.northing_standard_deviation);
      stream.next(m.easting_standard_deviation);
      stream.next(m.uping_standard_deviation);
      stream.next(m.roll_standard_deviation);
      stream.next(m.pitch_standard_deviation);
      stream.next(m.azimuth_standard_deviation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Inspvax_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_msgs::Inspvax_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_msgs::Inspvax_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "undulation: ";
    Printer<float>::stream(s, indent + "  ", v.undulation);
    s << indent << "north_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity);
    s << indent << "east_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity);
    s << indent << "up_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.up_velocity);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "latitude_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_standard_deviation);
    s << indent << "longitude_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_standard_deviation);
    s << indent << "height_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.height_standard_deviation);
    s << indent << "northing_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.northing_standard_deviation);
    s << indent << "easting_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.easting_standard_deviation);
    s << indent << "uping_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.uping_standard_deviation);
    s << indent << "roll_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.roll_standard_deviation);
    s << indent << "pitch_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_standard_deviation);
    s << indent << "azimuth_standard_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth_standard_deviation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_MSGS_MESSAGE_INSPVAX_H
